{"ast":null,"code":"import { baseURL } from \"./settings\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nfunction apiFacade() {\n  const setToken = token => {\n    localStorage.setItem('jwtToken', token);\n  };\n\n  const getToken = () => {\n    return localStorage.getItem('jwtToken');\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n  };\n\n  const login = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(baseURL + \"/api/login\", options).then(handleHttpErrors).then(res => {\n      setToken(res.token);\n    });\n  };\n\n  const fetchData = () => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n\n    return fetch(baseURL + \"/api/info/user\", options).then(handleHttpErrors);\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json',\n        'Origin': '*'\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout,\n    fetchData\n  };\n}\n\nconst facade = apiFacade();\nexport default facade;","map":{"version":3,"sources":["/Users/cecilie/NetBeansProjects/CA_03/Eksamen_Startkode_Frontend/src/loginFacade.js"],"names":["baseURL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","apiFacade","setToken","token","localStorage","setItem","getToken","getItem","loggedIn","logout","removeItem","login","user","password","options","makeOptions","username","fetch","then","fetchData","method","addToken","body","opts","headers","JSON","stringify","facade"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,WAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,MAAM,EAAEJ,GAAG,CAACI,MAAd;AAAsBC,MAAAA,SAAS,EAAEL,GAAG,CAACM,IAAJ;AAAjC,KAAf,CAAP;AACH;;AACD,SAAON,GAAG,CAACM,IAAJ,EAAP;AACH;;AAED,SAASC,SAAT,GAAqB;AACjB,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxBC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACH,GAFD;;AAGA,QAAMG,QAAQ,GAAG,MAAM;AACnB,WAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;AACH,GAFD;;AAGA,QAAMC,QAAQ,GAAG,MAAM;AACnB,UAAMA,QAAQ,GAAGF,QAAQ,MAAM,IAA/B;AACA,WAAOE,QAAP;AACH,GAHD;;AAIA,QAAMC,MAAM,GAAG,MAAM;AACjBL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACH,GAFD;;AAIA,QAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC9B,UAAMC,OAAO,GAAGC,WAAW,CAAC,MAAD,EAAS,IAAT,EAAe;AAAEC,MAAAA,QAAQ,EAAEJ,IAAZ;AAAkBC,MAAAA,QAAQ,EAAEA;AAA5B,KAAf,CAA3B;AACA,WAAOI,KAAK,CAACzB,OAAO,GAAG,YAAX,EAAyBsB,OAAzB,CAAL,CACFI,IADE,CACGzB,gBADH,EAEFyB,IAFE,CAEGxB,GAAG,IAAI;AAAEQ,MAAAA,QAAQ,CAACR,GAAG,CAACS,KAAL,CAAR;AAAqB,KAFjC,CAAP;AAGH,GALD;;AAOA,QAAMgB,SAAS,GAAG,MAAM;AACpB,UAAML,OAAO,GAAGC,WAAW,CAAC,KAAD,EAAQ,IAAR,CAA3B,CADoB,CACsB;;AAC1C,WAAOE,KAAK,CAACzB,OAAO,GAAG,gBAAX,EAA6BsB,OAA7B,CAAL,CAA2CI,IAA3C,CAAgDzB,gBAAhD,CAAP;AACH,GAHD;;AAIA,QAAMsB,WAAW,GAAG,CAACK,MAAD,EAASC,QAAT,EAAmBC,IAAnB,KAA4B;AAC5C,QAAIC,IAAI,GAAG;AACPH,MAAAA,MAAM,EAAEA,MADD;AAEPI,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU,kBAFL;AAGL,kBAAU;AAHL;AAFF,KAAX;;AAQA,QAAIH,QAAQ,IAAIb,QAAQ,EAAxB,EAA4B;AACxBe,MAAAA,IAAI,CAACC,OAAL,CAAa,gBAAb,IAAiClB,QAAQ,EAAzC;AACH;;AACD,QAAIgB,IAAJ,EAAU;AACNC,MAAAA,IAAI,CAACD,IAAL,GAAYG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACH;;AACD,WAAOC,IAAP;AACH,GAhBD;;AAiBA,SAAO;AACHR,IAAAA,WADG;AAEHb,IAAAA,QAFG;AAGHI,IAAAA,QAHG;AAIHE,IAAAA,QAJG;AAKHG,IAAAA,KALG;AAMHF,IAAAA,MANG;AAOHU,IAAAA;AAPG,GAAP;AASH;;AACD,MAAMQ,MAAM,GAAG1B,SAAS,EAAxB;AACA,eAAe0B,MAAf","sourcesContent":["import {baseURL} from \"./settings\"\n\nfunction handleHttpErrors(res) {\n    if (!res.ok) {\n        return Promise.reject({ status: res.status, fullError: res.json() })\n    }\n    return res.json();\n}\n\nfunction apiFacade() {\n    const setToken = (token) => {\n        localStorage.setItem('jwtToken', token)\n    }\n    const getToken = () => {\n        return localStorage.getItem('jwtToken')\n    }\n    const loggedIn = () => {\n        const loggedIn = getToken() != null;\n        return loggedIn;\n    }\n    const logout = () => {\n        localStorage.removeItem(\"jwtToken\");\n    }\n\n    const login = (user, password) => {\n        const options = makeOptions(\"POST\", true, { username: user, password: password });\n        return fetch(baseURL + \"/api/login\", options)\n            .then(handleHttpErrors)\n            .then(res => { setToken(res.token) })\n    }\n\n    const fetchData = () => {\n        const options = makeOptions(\"GET\", true); //True add's the token\n        return fetch(baseURL + \"/api/info/user\", options).then(handleHttpErrors);\n    }\n    const makeOptions = (method, addToken, body) => {\n        var opts = {\n            method: method,\n            headers: {\n                \"Content-type\": \"application/json\",\n                'Accept': 'application/json',\n                'Origin': '*'\n            }\n        }\n        if (addToken && loggedIn()) {\n            opts.headers[\"x-access-token\"] = getToken();\n        }\n        if (body) {\n            opts.body = JSON.stringify(body);\n        }\n        return opts;\n    }\n    return {\n        makeOptions,\n        setToken,\n        getToken,\n        loggedIn,\n        login,\n        logout,\n        fetchData\n    }\n}\nconst facade = apiFacade();\nexport default facade;\n"]},"metadata":{},"sourceType":"module"}